Index: src/Herbivore.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\r\n\r\npublic abstract class Herbivore extends Animal {\r\n    double health;\r\n\r\n    @Override\r\n    public void eat() {\r\n        Random random = new Random();\r\n        List<Plant> plantsList = getLocation().getPlantsList();\r\n        Iterator iterator = plantsList.iterator();\r\n        while (iterator.hasNext()) {\r\n            Plant plant = (Plant) iterator.next();\r\n            if (canEat.containsKey(plant.getClass())) {\r\n                if (getHealth() < Constants.MAX_HEALTH) {\r\n                    double newHealth = getHealth() + (plant.getWeight() * 100 / getKgEnoughFood());\r\n                    setHealth(newHealth > Constants.MAX_HEALTH ? Constants.MAX_HEALTH : newHealth);\r\n                    System.out.println(this.getClass().getSimpleName() + \" ate \" + plant.getClass().getSimpleName());\r\n                    plant.die(iterator);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public abstract void setHealth(double health);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Herbivore.java b/src/Herbivore.java
--- a/src/Herbivore.java	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/src/Herbivore.java	(date 1694010973631)
@@ -1,11 +1,10 @@
 import java.util.*;
 
 public abstract class Herbivore extends Animal {
-    double health;
+   private double health=50;
 
     @Override
     public void eat() {
-        Random random = new Random();
         List<Plant> plantsList = getLocation().getPlantsList();
         Iterator iterator = plantsList.iterator();
         while (iterator.hasNext()) {
@@ -20,7 +19,6 @@
             }
         }
     }
-
     public abstract void setHealth(double health);
 
 }
Index: src/Plant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class Plant extends Organism {\r\n    private final int weight = 1;\r\n    private final int maxQuantityInLocation = 200;\r\n\r\n    @Override\r\n    public void generate() {\r\n        if (isCanGenerate() && getLocation().getPlantsList().size() < getMaxQuantityInLocation()) {\r\n            Plant plant = new Plant();\r\n            plant.setLocation(getLocation());\r\n            getLocation().getPlantsList().add(plant);\r\n            setCanGenerate(false);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public double getWeight() {\r\n        return weight;\r\n    }\r\n\r\n    @Override\r\n    public int getMaxQuantityInLocation() {\r\n        return maxQuantityInLocation;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Plant.java b/src/Plant.java
--- a/src/Plant.java	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/src/Plant.java	(date 1694010964772)
@@ -22,6 +22,12 @@
         return maxQuantityInLocation;
     }
 
+    @Override
+    public void die() {
+        getLocation().getPlantsList().remove(this);
+        setAlive(false);
+    }
+
     @Override
     public void run() {
 
Index: src/Predator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\r\n\r\npublic abstract class Predator extends Animal {\r\n    @Override\r\n    public void eat() {\r\n        Random random=new Random();\r\n        List<Animal> animals = getLocation().getAnimalList();\r\n        Iterator it = animals.iterator();\r\n        while (it.hasNext()) {\r\n            Animal animal = (Animal) it.next();\r\n            if (canEat.containsKey(animal.getClass())) {\r\n                int сhanceEat = canEat.get(animal.getClass());\r\n               if(random.nextInt(Constants.PERCENT)<=сhanceEat) {\r\n                   if (getHealth() < Constants.MAX_HEALTH) {\r\n                       double newHealth = getHealth() + (animal.getWeight() * 100 / getKgEnoughFood());\r\n                       setHealth(newHealth > Constants.MAX_HEALTH ? Constants.MAX_HEALTH : newHealth);\r\n                       System.out.println(this.getClass().getSimpleName() + \" ate \" + animal.getClass().getSimpleName());\r\n                       animal.die(it);\r\n                   }\r\n               }\r\n\r\n            }\r\n        }\r\n    }\r\n    public abstract void setHealth(double health);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Predator.java b/src/Predator.java
--- a/src/Predator.java	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/src/Predator.java	(date 1694010964786)
@@ -5,22 +5,30 @@
     public void eat() {
         Random random=new Random();
         List<Animal> animals = getLocation().getAnimalList();
-        Iterator it = animals.iterator();
-        while (it.hasNext()) {
-            Animal animal = (Animal) it.next();
-            if (canEat.containsKey(animal.getClass())) {
-                int сhanceEat = canEat.get(animal.getClass());
+        int numberOfSacrifice = random.nextInt(animals.size());
+            if (canEat.containsKey(animals.get(numberOfSacrifice).getClass())) {
+                int сhanceEat = canEat.get(animals.get(numberOfSacrifice).getClass());
                if(random.nextInt(Constants.PERCENT)<=сhanceEat) {
                    if (getHealth() < Constants.MAX_HEALTH) {
-                       double newHealth = getHealth() + (animal.getWeight() * 100 / getKgEnoughFood());
+                       double newHealth = getHealth() + (animals.get(numberOfSacrifice).getWeight() * 100 / getKgEnoughFood());
                        setHealth(newHealth > Constants.MAX_HEALTH ? Constants.MAX_HEALTH : newHealth);
-                       System.out.println(this.getClass().getSimpleName() + " ate " + animal.getClass().getSimpleName());
-                       animal.die(it);
-                   }
-               }
-
-            }
-        }
-    }
+                       System.out.println(this.getClass().getSimpleName() + " ate " + animals.get(numberOfSacrifice).getClass().getSimpleName());
+                       animals.get(numberOfSacrifice).die();
+                       try {
+                           Thread.sleep(200);
+                       } catch (InterruptedException e) {
+                           throw new RuntimeException(e);
+                       }
+                   }
+               }
+
+            }
+        }
     public abstract void setHealth(double health);
+
+    @Override
+    public void die() {
+        getLocation().getAnimalList().remove(this);
+        setAlive(false);
+    }
 }
Index: src/Animal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\n\r\npublic abstract class Animal extends Organism {\r\n    private boolean willEat=false;\r\n\r\n\r\n\r\n    private Random random = new Random();\r\n    private Location location;\r\n\r\n    @Override\r\n    public Location getLocation() {\r\n        return location;\r\n    }\r\n\r\n    @Override\r\n    public void setLocation(Location location) {\r\n        this.location = location;\r\n    }\r\n    public boolean isWillEat() {\r\n        return willEat;\r\n    }\r\n\r\n    public void setWillEat(boolean willEat) {\r\n        this.willEat = willEat;\r\n    }\r\n\r\n    public Random getRandom() {\r\n        return random;\r\n    }\r\n\r\n    Map<Class<?>, Integer> canEat = new HashMap<>();\r\n\r\n    public abstract void eat();\r\n\r\n    public abstract double getHealth();\r\n\r\n    public abstract double getKgEnoughFood();\r\n\r\n    public abstract int getSpeed();\r\n    public Animal getKinder(Animal animal) {\r\n        if (animal instanceof Bear)\r\n            return new Bear();\r\n        else if (animal instanceof Boa)\r\n            return new Boa();\r\n        else if (animal instanceof Buffalo) {\r\n            return new Buffalo();\r\n        } else if (animal instanceof Boar)\r\n            return new Boar();\r\n        else if (animal instanceof Deer)\r\n            return new Deer();\r\n        else if (animal instanceof Duck)\r\n            return new Duck();\r\n        else if (animal instanceof Eagle)\r\n            return new Eagle();\r\n        else if (animal instanceof Fox)\r\n            return new Fox();\r\n        else if (animal instanceof Goat)\r\n            return new Goat();\r\n        else if (animal instanceof Gusin)\r\n            return new Gusin();\r\n        else if (animal instanceof Horse)\r\n            return new Horse();\r\n        else if (animal instanceof Mouse)\r\n            return new Mouse();\r\n        else if (animal instanceof Rabbit)\r\n            return new Rabbit();\r\n        else if (animal instanceof Sheep)\r\n            return new Sheep();\r\n        else if (animal instanceof Wolf)\r\n            return new Wolf();\r\n        else return null; // must be exception in future\r\n    }\r\n    public void move() {\r\n        int speed = getSpeed();\r\n        int steps = getRandom().nextInt(speed+1);\r\n        if (steps > 0) {\r\n            for (int i = 0; i < steps; i++)\r\n                changeLocation();\r\n        }\r\n    }\r\n    public void generate() {\r\n        int countOfThisSpecies = 0;\r\n         for (Animal animal : getLocation().getAnimalList()) {\r\n            if (animal.getClass().equals(this.getClass()))\r\n                countOfThisSpecies++;\r\n\r\n            if (countOfThisSpecies < getMaxQuantityInLocation() && countOfThisSpecies > 1 && isCanGenerate()) {\r\n                getLocation().getAnimalList().add(getKinder(animal));\r\n                animal.setLocation(getLocation());\r\n                setCanGenerate(false);\r\n                animal.setCanGenerate(false);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public int getCountOfAnimalKind(Location location, Organism organism) {\r\n        int count=0;\r\n        for(Animal animal:location.getAnimalList()) {\r\n            if(organism.getClass().equals(animal.getClass()))\r\n                count++;\r\n        } return count;\r\n    }\r\n    public void changeLocation() {\r\n        int height = getLocation().height;\r\n        int width = getLocation().width;\r\n        Direction direction = Direction.values()[getRandom().nextInt(Direction.values().length)];\r\n        switch (direction) {\r\n            case UP:\r\n                if (height > 0 && getCountOfAnimalKind(getLocations()[width][height - 1], this) < getMaxQuantityInLocation()) {\r\n                   getLocations()[width][height].animalList.remove(this);\r\n                    setLocation(getLocations()[width][--height]);\r\n                    getLocations()[width][height].animalList.add(this);\r\n                }\r\n                break;\r\n            case DOWN:\r\n                if (height < getLocations().length && getCountOfAnimalKind( getLocations()[width][height + 1], this) < getMaxQuantityInLocation()) {\r\n                   getLocations()[width][height].animalList.remove(this);\r\n                    setLocation(getLocations()[width][++height]);\r\n                   getLocations()[width][height].animalList.add(this);\r\n                }\r\n                break;\r\n            case LEFT:\r\n                if (width > 0 && getCountOfAnimalKind(getLocations()[width - 1][height], this) < getMaxQuantityInLocation()) {\r\n                   getLocations()[width][height].animalList.remove(this);\r\n                    setLocation(getLocations()[--width][height]);\r\n                   getLocations()[width][height].animalList.add(this);\r\n                }\r\n                break;\r\n            case RIGHT:\r\n                if (width < getLocations()[height].length && getCountOfAnimalKind(getLocations()[width + 1][height], this) < getMaxQuantityInLocation()) {\r\n                   getLocations()[width][height].animalList.remove(this);\r\n                    setLocation(getLocations()[++width][height]);\r\n                    getLocations()[width][height].animalList.add(this);\r\n                }\r\n                break;\r\n            case STAY_OUT:\r\n                break;\r\n        }\r\n    }\r\n    public void run() {\r\n        eat();\r\n        move();\r\n        generate();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Animal.java b/src/Animal.java
--- a/src/Animal.java	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/src/Animal.java	(date 1694010970424)
@@ -3,29 +3,8 @@
 import java.util.Random;
 
 public abstract class Animal extends Organism {
-    private boolean willEat=false;
-
-
-
     private Random random = new Random();
-    private Location location;
-
-    @Override
-    public Location getLocation() {
-        return location;
-    }
-
-    @Override
-    public void setLocation(Location location) {
-        this.location = location;
-    }
-    public boolean isWillEat() {
-        return willEat;
-    }
-
-    public void setWillEat(boolean willEat) {
-        this.willEat = willEat;
-    }
+    private double health=50;
 
     public Random getRandom() {
         return random;
@@ -88,8 +67,9 @@
                 countOfThisSpecies++;
 
             if (countOfThisSpecies < getMaxQuantityInLocation() && countOfThisSpecies > 1 && isCanGenerate()) {
-                getLocation().getAnimalList().add(getKinder(animal));
-                animal.setLocation(getLocation());
+                Animal kinder = getKinder(animal);
+                getLocation().getAnimalList().add(kinder);
+                kinder.setLocation(getLocation());
                 setCanGenerate(false);
                 animal.setCanGenerate(false);
 
Index: src/Boar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Iterator;\r\nimport java.util.List;\r\n\r\npublic class Boar extends Herbivore {\r\n    private final int weight = 400;\r\n    private final int maxQuantityInLocation = 50;\r\n    private final int speed = 2;\r\n    private final int kgEnoughFood = 50;\r\n    private double health = 50;\r\n    public Boar() {\r\n        initCanEat();\r\n    }\r\n    public void initCanEat() {\r\n        canEat.put(Mouse.class, 50);\r\n        canEat.put(Gusin.class, 90);\r\n        canEat.put(Plant.class, 100);\r\n    }\r\n    @Override\r\n    public double getHealth() {\r\n        return health;\r\n    }\r\n\r\n    @Override\r\n    public double getKgEnoughFood() {\r\n        return kgEnoughFood;\r\n    }\r\n\r\n    @Override\r\n    public int getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    public double getWeight() {\r\n        return weight;\r\n    }\r\n\r\n    public void eat() {\r\n        List<Plant> plantsList = getLocation().getPlantsList();\r\n        Iterator iterator = plantsList.iterator();\r\n        while (iterator.hasNext()) {\r\n            Plant plant = (Plant) iterator.next();\r\n            if (canEat.containsKey(plant.getClass())) {\r\n                if (getHealth() < Constants.MAX_HEALTH) {\r\n                    double weight = plant.getWeight();\r\n                    double kgen = getKgEnoughFood();\r\n                    double newHealth = getHealth() + (weight * 100 / kgen);\r\n                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);\r\n                    System.out.println(getHealth());\r\n                    System.out.println(\"eagle is eating plant\");\r\n                    plant.die(iterator);\r\n                }\r\n            }\r\n        }\r\n        List<Animal> animalList = getLocation().getAnimalList();\r\n        for (Animal animal : animalList) {\r\n            if (canEat.containsKey(animal.getClass())) {\r\n                if (getHealth() < Constants.MAX_HEALTH) {\r\n                    double weight = animal.getWeight();\r\n                    double kgen = getKgEnoughFood();\r\n                    double newHealth = getHealth() + (weight * 100 / kgen);\r\n                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);\r\n                    System.out.println(getHealth());\r\n                    System.out.println(\"eagle is eating plant\");\r\n                    animal.die(iterator);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    @Override\r\n    public int getMaxQuantityInLocation() {\r\n        return maxQuantityInLocation;\r\n    }\r\n    @Override\r\n    public void setHealth(double health) {\r\n        this.health = health;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Boar.java b/src/Boar.java
--- a/src/Boar.java	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/src/Boar.java	(date 1694010970469)
@@ -1,5 +1,6 @@
 import java.util.Iterator;
 import java.util.List;
+import java.util.Random;
 
 public class Boar extends Herbivore {
     private final int weight = 400;
@@ -35,35 +36,33 @@
     }
 
     public void eat() {
+        Random random = new Random();
         List<Plant> plantsList = getLocation().getPlantsList();
-        Iterator iterator = plantsList.iterator();
-        while (iterator.hasNext()) {
-            Plant plant = (Plant) iterator.next();
-            if (canEat.containsKey(plant.getClass())) {
-                if (getHealth() < Constants.MAX_HEALTH) {
-                    double weight = plant.getWeight();
-                    double kgen = getKgEnoughFood();
-                    double newHealth = getHealth() + (weight * 100 / kgen);
-                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);
-                    System.out.println(getHealth());
-                    System.out.println("eagle is eating plant");
-                    plant.die(iterator);
-                }
+        int numberOfSacrifice = random.nextInt(plantsList.size());
+        if (canEat.containsKey(Plant.class)) {
+            if (getHealth() < Constants.MAX_HEALTH) {
+                double newHealth = getHealth() + (plantsList.get(numberOfSacrifice).getWeight() * 100 / getKgEnoughFood());
+                setHealth(newHealth > Constants.MAX_HEALTH ? Constants.MAX_HEALTH : newHealth);
+                System.out.println(this.getClass().getSimpleName() + " ate " + plantsList.get(numberOfSacrifice).getClass().getSimpleName());
+                plantsList.get(numberOfSacrifice).die();
             }
         }
-        List<Animal> animalList = getLocation().getAnimalList();
-        for (Animal animal : animalList) {
-            if (canEat.containsKey(animal.getClass())) {
+        List<Animal> animals = getLocation().getAnimalList();
+        int numberOfSacrifice2 = random.nextInt(animals.size());
+        if (canEat.containsKey(animals.get(numberOfSacrifice2).getClass())) {
+            int сhanceEat = canEat.get(animals.get(numberOfSacrifice2).getClass());
+            if (random.nextInt(Constants.PERCENT) <= сhanceEat) {
                 if (getHealth() < Constants.MAX_HEALTH) {
-                    double weight = animal.getWeight();
-                    double kgen = getKgEnoughFood();
-                    double newHealth = getHealth() + (weight * 100 / kgen);
-                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);
-                    System.out.println(getHealth());
-                    System.out.println("eagle is eating plant");
-                    animal.die(iterator);
+                    double newHealth = getHealth() + (animals.get(numberOfSacrifice).getWeight() * 100 / getKgEnoughFood());
+                    setHealth(newHealth > Constants.MAX_HEALTH ? Constants.MAX_HEALTH : newHealth);
+                    System.out.println(this.getClass().getSimpleName() + " ate " + animals.get(numberOfSacrifice).getClass().getSimpleName());
+                    animals.get(numberOfSacrifice).die();
+                    try {
+                        Thread.sleep(200);
+                    } catch (InterruptedException e) {
+                        throw new RuntimeException(e);
+                    }
                 }
-
             }
         }
     }
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Island island = new Island(100, 20);\r\n        for(int i=0; i<island.getLocations().length; i++) {\r\n            for(int j=0; j<island.getLocations()[i].length; j++) {\r\n                for(Animal animal:island.getLocations()[i][j].animalList) {\r\n                    animal.setLocation(island.getLocations()[i][j]);\r\n                    animal.run();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/src/Main.java	(date 1694010973439)
@@ -1,15 +1,11 @@
-
 
 public class Main {
     public static void main(String[] args) {
-        Island island = new Island(100, 20);
-        for(int i=0; i<island.getLocations().length; i++) {
-            for(int j=0; j<island.getLocations()[i].length; j++) {
-                for(Animal animal:island.getLocations()[i][j].animalList) {
-                    animal.setLocation(island.getLocations()[i][j]);
-                    animal.run();
-                }
+        Location[][] locations = new LocationInitializer().getInitializeLocations(100, 20);
+        for(int i=0; i<locations.length; i++) {
+            for(int j=0; j<locations[i].length; j++) {
+                locations[i][j].getAnimalList().forEach(Animal::run);
             }
         }
     }
-}
\ No newline at end of file
+    }
\ No newline at end of file
Index: src/Duck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Iterator;\r\nimport java.util.List;\r\n\r\npublic class Duck extends Herbivore {\r\n    private final int weight=1;\r\n    private final int maxQuantityInLocation=200;\r\n    private final int speed=4;\r\n    private final double kgEnoughFood=0.15;\r\n\r\n    public Duck() {\r\n        initCanEat();\r\n    }\r\n    public void initCanEat(){\r\n        canEat.put(Gusin.class, 90);\r\n        canEat.put(Plant.class, 100);\r\n    }\r\n    @Override\r\n    public double getHealth() {\r\n        return health;\r\n    }\r\n    @Override\r\n    public double getKgEnoughFood() {\r\n        return (int) kgEnoughFood;\r\n    }\r\n\r\n    public void eat() {\r\n        List<Plant> plantsList = getLocation().getPlantsList();\r\n        Iterator iterator=plantsList.iterator();\r\n        while (iterator.hasNext()) {\r\n            Plant plant = (Plant) iterator.next();\r\n            if (canEat.containsKey(plant.getClass())) {\r\n                if (getHealth() < Constants.MAX_HEALTH) {\r\n                    double weight = plant.getWeight();\r\n                    double kgen = getKgEnoughFood();\r\n                    double newHealth = getHealth() + (weight * 100 / kgen);\r\n                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);\r\n                    System.out.println(getHealth());\r\n                    System.out.println(\"eagle is eating plant\");\r\n                    plant.die(iterator);\r\n                }\r\n            }\r\n        }\r\n        List<Animal> animalList = getLocation().getAnimalList();\r\n        for(Animal animal: animalList) {\r\n            if(canEat.containsKey(animal.getClass())) {\r\n                if (getHealth() < Constants.MAX_HEALTH) {\r\n                    double weight = animal.getWeight();\r\n                    double kgen = getKgEnoughFood();\r\n                    double newHealth = getHealth() + (weight * 100 / kgen);\r\n                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);\r\n                    System.out.println(getHealth());\r\n                    System.out.println(\"eagle is eating plant\");\r\n                    animal.die(iterator);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    @Override\r\n    public int getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    @Override\r\n    public double getWeight() {\r\n        return weight;\r\n    }\r\n    @Override\r\n    public int getMaxQuantityInLocation() {\r\n        return maxQuantityInLocation;\r\n    }\r\n    @Override\r\n    public void setHealth(double health) {\r\n        this.health=health;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Duck.java b/src/Duck.java
--- a/src/Duck.java	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/src/Duck.java	(date 1694010973457)
@@ -1,5 +1,6 @@
 import java.util.Iterator;
 import java.util.List;
+import java.util.Random;
 
 public class Duck extends Herbivore {
     private final int weight=1;
@@ -24,33 +25,32 @@
     }
 
     public void eat() {
+        Random random = new Random();
         List<Plant> plantsList = getLocation().getPlantsList();
-        Iterator iterator=plantsList.iterator();
-        while (iterator.hasNext()) {
-            Plant plant = (Plant) iterator.next();
-            if (canEat.containsKey(plant.getClass())) {
-                if (getHealth() < Constants.MAX_HEALTH) {
-                    double weight = plant.getWeight();
-                    double kgen = getKgEnoughFood();
-                    double newHealth = getHealth() + (weight * 100 / kgen);
-                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);
-                    System.out.println(getHealth());
-                    System.out.println("eagle is eating plant");
-                    plant.die(iterator);
-                }
+        int numberOfSacrifice = random.nextInt(plantsList.size());
+        if (canEat.containsKey(Plant.class)) {
+            if (getHealth() < Constants.MAX_HEALTH) {
+                double newHealth = getHealth() + (plantsList.get(numberOfSacrifice).getWeight() * 100 / getKgEnoughFood());
+                setHealth(newHealth > Constants.MAX_HEALTH ? Constants.MAX_HEALTH : newHealth);
+                System.out.println(this.getClass().getSimpleName() + " ate " + plantsList.get(numberOfSacrifice).getClass().getSimpleName());
+                plantsList.get(numberOfSacrifice).die();
             }
         }
-        List<Animal> animalList = getLocation().getAnimalList();
-        for(Animal animal: animalList) {
-            if(canEat.containsKey(animal.getClass())) {
+        List<Animal> animals = getLocation().getAnimalList();
+        int numberOfSacrifice2 = random.nextInt(animals.size());
+        if (canEat.containsKey(animals.get(numberOfSacrifice2).getClass())) {
+            int сhanceEat = canEat.get(animals.get(numberOfSacrifice2).getClass());
+            if (random.nextInt(Constants.PERCENT) <= сhanceEat) {
                 if (getHealth() < Constants.MAX_HEALTH) {
-                    double weight = animal.getWeight();
-                    double kgen = getKgEnoughFood();
-                    double newHealth = getHealth() + (weight * 100 / kgen);
-                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);
-                    System.out.println(getHealth());
-                    System.out.println("eagle is eating plant");
-                    animal.die(iterator);
+                    double newHealth = getHealth() + (animals.get(numberOfSacrifice).getWeight() * 100 / getKgEnoughFood());
+                    setHealth(newHealth > Constants.MAX_HEALTH ? Constants.MAX_HEALTH : newHealth);
+                    System.out.println(this.getClass().getSimpleName() + " ate " + animals.get(numberOfSacrifice).getClass().getSimpleName());
+                    animals.get(numberOfSacrifice).die();
+                    try {
+                        Thread.sleep(200);
+                    } catch (InterruptedException e) {
+                        throw new RuntimeException(e);
+                    }
                 }
             }
         }
Index: src/Organism.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Iterator;\r\n\r\npublic abstract class Organism implements Runnable {\r\n    private Location[][] locations;\r\n    private Island island;\r\n\r\n    public Island getIsland() {\r\n        return island;\r\n    }\r\n\r\n    public void setIsland(Island island) {\r\n        this.island = island;\r\n    }\r\n\r\n    public Location[][] getLocations() {\r\n        return island.getLocations();\r\n    }\r\n\r\n    public void setLocations(Location[][] locations) {\r\n        this.locations = locations;\r\n    }\r\n\r\n    private Location location;\r\n    private boolean isCanGenerate=true;\r\n    private boolean isAlive=true;\r\n    public abstract void generate();\r\n    public abstract double getWeight();\r\n\r\n    public abstract int getMaxQuantityInLocation();\r\n    public void die(Iterator it) {\r\n        it.remove();\r\n        setAlive(false);\r\n    }\r\n    public boolean isCanGenerate() {\r\n        return isCanGenerate;\r\n    }\r\n    public void setCanGenerate(boolean canGenerate) {\r\n        isCanGenerate = canGenerate;\r\n    }\r\n    public boolean isAlive() {\r\n        return isAlive;\r\n    }\r\n\r\n    public Location getLocation() {\r\n        return location;\r\n    }\r\n\r\n    public void setAlive(boolean alive) {\r\n        isAlive = alive;\r\n    }\r\n    public void setLocation(Location location) {\r\n        this.location=location;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Organism.java b/src/Organism.java
--- a/src/Organism.java	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/src/Organism.java	(date 1694010973465)
@@ -27,10 +27,7 @@
     public abstract double getWeight();
 
     public abstract int getMaxQuantityInLocation();
-    public void die(Iterator it) {
-        it.remove();
-        setAlive(false);
-    }
+    public abstract void die();
     public boolean isCanGenerate() {
         return isCanGenerate;
     }
Index: src/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public final class Constants {\r\n   public static final int MAX_HEALTH=100;\r\n   public static final int WillEat=1;\r\n   public static final int noEat=0;\r\n   public static final int PERCENT=100;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Constants.java b/src/Constants.java
--- a/src/Constants.java	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/src/Constants.java	(date 1694010979042)
@@ -3,4 +3,5 @@
    public static final int WillEat=1;
    public static final int noEat=0;
    public static final int PERCENT=100;
+   public static final int DECREASE_HEALTH_AFTER_GENERATION=20;
 }
Index: src/Mouse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Iterator;\r\nimport java.util.List;\r\n\r\npublic class Mouse extends Herbivore {\r\n    private final double weight=0.05;\r\n    private final int maxQuantityInLocation=500;\r\n    private final int speed=1;\r\n    private final double kgEnoughFood=0.01;\r\n    private double health=50;\r\n    @Override\r\n    public double getHealth() {\r\n        return health;\r\n    }\r\n    @Override\r\n    public double getKgEnoughFood() {\r\n        return (int) kgEnoughFood;\r\n    }\r\n\r\n    public Mouse() {\r\n        initCanEat();\r\n    }\r\n    public void initCanEat(){\r\n        canEat.put(Plant.class, 100);\r\n        canEat.put(Gusin.class, 90);\r\n    }\r\n    public void run() {}\r\n    public void eat() {\r\n        List<Plant> plantsList = getLocation().getPlantsList();\r\n        Iterator iterator=plantsList.iterator();\r\n        while (iterator.hasNext()) {\r\n            Plant plant = (Plant) iterator.next();\r\n            if (canEat.containsKey(plant.getClass())) {\r\n                if (getHealth() < Constants.MAX_HEALTH) {\r\n                    double weight = plant.getWeight();\r\n                    double kgen = getKgEnoughFood();\r\n                    double newHealth = getHealth() + (weight * 100 / kgen);\r\n                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);\r\n                    System.out.println(getHealth());\r\n                    System.out.println(\"eagle is eating plant\");\r\n                    plant.die(iterator);\r\n                }\r\n            }\r\n        }\r\n        List<Animal> animalList = getLocation().getAnimalList();\r\n        for(Animal animal: animalList) {\r\n            if(canEat.containsKey(animal.getClass())) {\r\n                if (getHealth() < Constants.MAX_HEALTH) {\r\n                    double weight = animal.getWeight();\r\n                    double kgen = getKgEnoughFood();\r\n                    double newHealth = getHealth() + (weight * 100 / kgen);\r\n                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);\r\n                    System.out.println(getHealth());\r\n                    System.out.println(\"eagle is eating plant\");\r\n                    animal.die(iterator);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    @Override\r\n    public int getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    public double getWeight() {\r\n        return (int)  weight;\r\n    }\r\n    @Override\r\n    public int getMaxQuantityInLocation() {\r\n        return maxQuantityInLocation;\r\n    }\r\n    @Override\r\n    public void setHealth(double health) {\r\n        this.health=health;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Mouse.java b/src/Mouse.java
--- a/src/Mouse.java	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/src/Mouse.java	(date 1694010973465)
@@ -1,5 +1,6 @@
 import java.util.Iterator;
 import java.util.List;
+import java.util.Random;
 
 public class Mouse extends Herbivore {
     private final double weight=0.05;
@@ -25,38 +26,35 @@
     }
     public void run() {}
     public void eat() {
+        Random random = new Random();
         List<Plant> plantsList = getLocation().getPlantsList();
-        Iterator iterator=plantsList.iterator();
-        while (iterator.hasNext()) {
-            Plant plant = (Plant) iterator.next();
-            if (canEat.containsKey(plant.getClass())) {
-                if (getHealth() < Constants.MAX_HEALTH) {
-                    double weight = plant.getWeight();
-                    double kgen = getKgEnoughFood();
-                    double newHealth = getHealth() + (weight * 100 / kgen);
-                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);
-                    System.out.println(getHealth());
-                    System.out.println("eagle is eating plant");
-                    plant.die(iterator);
-                }
+        int numberOfSacrifice = random.nextInt(plantsList.size());
+        if (canEat.containsKey(Plant.class)) {
+            if (getHealth() < Constants.MAX_HEALTH) {
+                double newHealth = getHealth() + (plantsList.get(numberOfSacrifice).getWeight() * 100 / getKgEnoughFood());
+                setHealth(newHealth > Constants.MAX_HEALTH ? Constants.MAX_HEALTH : newHealth);
+                System.out.println(this.getClass().getSimpleName() + " ate " + plantsList.get(numberOfSacrifice).getClass().getSimpleName());
+                plantsList.get(numberOfSacrifice).die();
             }
         }
-        List<Animal> animalList = getLocation().getAnimalList();
-        for(Animal animal: animalList) {
-            if(canEat.containsKey(animal.getClass())) {
+        List<Animal> animals = getLocation().getAnimalList();
+        int numberOfSacrifice2 = random.nextInt(animals.size());
+        if (canEat.containsKey(animals.get(numberOfSacrifice2).getClass())) {
+            int сhanceEat = canEat.get(animals.get(numberOfSacrifice2).getClass());
+            if (random.nextInt(Constants.PERCENT) <= сhanceEat) {
                 if (getHealth() < Constants.MAX_HEALTH) {
-                    double weight = animal.getWeight();
-                    double kgen = getKgEnoughFood();
-                    double newHealth = getHealth() + (weight * 100 / kgen);
-                    this.setHealth(newHealth > 100 ? Constants.MAX_HEALTH : newHealth);
-                    System.out.println(getHealth());
-                    System.out.println("eagle is eating plant");
-                    animal.die(iterator);
+                    double newHealth = getHealth() + (animals.get(numberOfSacrifice).getWeight() * 100 / getKgEnoughFood());
+                    setHealth(newHealth > Constants.MAX_HEALTH ? Constants.MAX_HEALTH : newHealth);
+                    System.out.println(this.getClass().getSimpleName() + " ate " + animals.get(numberOfSacrifice).getClass().getSimpleName());
+                    animals.get(numberOfSacrifice).die();
+                    try {
+                        Thread.sleep(200);
+                    } catch (InterruptedException e) {
+                        throw new RuntimeException(e);
+                    }
                 }
-
             }
         }
-
     }
     @Override
     public int getSpeed() {
@@ -64,7 +62,7 @@
     }
 
     public double getWeight() {
-        return (int)  weight;
+        return  weight;
     }
     @Override
     public int getMaxQuantityInLocation() {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"ae279b04-08ac-4bf2-a4ad-5d624d25587f\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/Animal.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Bear.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Boar.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Constants.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Duck.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Herbivore.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Location.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Mouse.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Organism.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Plant.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Predator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Animal.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Bear.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Boa.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Boa.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Boar.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Buffalo.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Buffalo.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Constants.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Deer.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Deer.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Direction.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Direction.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Duck.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Eagle.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Eagle.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Enum.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Fox.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Fox.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Goat.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Goat.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Gusin.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Gusin.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Herbivore.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Horse.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Horse.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/InitMenu.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Location.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Mouse.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Organism.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Plant.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Predator.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Rabbit.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Rabbit.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Sheep.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Sheep.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/animal/Wolf.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Wolf.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"ROOT_SYNC\" value=\"SYNC\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"6db053c1-2671-4832-af0e-2cd53fd18b51\" />\r\n        <option name=\"url\" value=\"https://github.com/malyniak/wildlife.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2UeTcZ0iRlzbSGdnuaJ5sfLfqCA\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"autoscrollFromSource\" value=\"true\" />\r\n    <option name=\"autoscrollToSource\" value=\"true\" />\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"animal\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"ae279b04-08ac-4bf2-a4ad-5d624d25587f\" name=\"Changes\" comment=\"\" />\r\n      <created>1693299127555</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1693299127555</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/Predator.java</url>\r\n          <line>11</line>\r\n          <option name=\"timeStamp\" value=\"257\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/Predator.java</url>\r\n          <line>12</line>\r\n          <option name=\"timeStamp\" value=\"258\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/Predator.java</url>\r\n          <line>13</line>\r\n          <option name=\"timeStamp\" value=\"259\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n    <pin-to-top-manager>\r\n      <pinned-members>\r\n        <PinnedItemInfo parentTag=\"Island\" memberName=\"width\" />\r\n        <PinnedItemInfo parentTag=\"animal.Boa\" memberName=\"health\" />\r\n        <PinnedItemInfo parentTag=\"animal.Boa\" memberName=\"isAlive\" />\r\n      </pinned-members>\r\n    </pin-to-top-manager>\r\n    <watches-manager>\r\n      <configuration name=\"Application\">\r\n        <watch expression=\"locations[0][1].animalList\" />\r\n        <watch expression=\"locations[0][1].animalList\" />\r\n        <watch expression=\"locations[0][1].animalList\" />\r\n        <watch expression=\"animals\" />\r\n        <watch expression=\"locations\" language=\"JAVA\" />\r\n        <watch expression=\"locations\" />\r\n        <watch expression=\"island\" />\r\n        <watch expression=\"island\" />\r\n        <watch expression=\"island\" />\r\n        <watch expression=\"this\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/wildlife$Main.ic\" NAME=\"Main Coverage Results\" MODIFIED=\"1693672102715\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1b4af4fd7ea764f4e5278f6ea459b895f67a2a06)
+++ b/.idea/workspace.xml	(date 1694010976145)
@@ -5,44 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="ae279b04-08ac-4bf2-a4ad-5d624d25587f" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/src/Animal.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Bear.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Boar.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Constants.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Duck.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Herbivore.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Location.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Mouse.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Organism.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Plant.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Predator.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Location.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Location.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Animal.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Bear.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Boa.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Boa.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Boar.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Buffalo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Buffalo.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Constants.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Deer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Deer.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Direction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Direction.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Duck.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Eagle.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Eagle.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Enum.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Fox.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Fox.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Goat.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Goat.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Gusin.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Gusin.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Herbivore.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Horse.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Horse.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/InitMenu.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Location.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Mouse.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Organism.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Plant.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Predator.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Rabbit.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Rabbit.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Sheep.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Sheep.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/animal/Wolf.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Wolf.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -58,6 +23,11 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="devel" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
     <option name="ROOT_SYNC" value="SYNC" />
   </component>
@@ -82,16 +52,16 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "project.structure.last.edited": "SDKs",
+    "project.structure.proportion": "0.0",
+    "project.structure.side.proportion": "0.0"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CreateClassDialog.RecentsKey">
       <recent name="animal" />
@@ -120,25 +90,6 @@
     </option>
   </component>
   <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/src/Predator.java</url>
-          <line>11</line>
-          <option name="timeStamp" value="257" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/src/Predator.java</url>
-          <line>12</line>
-          <option name="timeStamp" value="258" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/src/Predator.java</url>
-          <line>13</line>
-          <option name="timeStamp" value="259" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
     <pin-to-top-manager>
       <pinned-members>
         <PinnedItemInfo parentTag="Island" memberName="width" />
